# 実行時に使うユーザとグループ
$ group
emjed emjed
$ user
emjed

$ ls -l /usr/local/lib/emjed
lrwxrwxrwx 1 root root .... emjed.jar -> emjed-x.x.x-standalone.jar
-rw-r--r-- 1 root root .... emjed-x.x.x-standalone.jar

$ ls -l /usr/local/bin/emjed
-rwxr-xr-x 1 root root .... /usr/local/bin/emjed

$ cat   /usr/local/bin/emjed
#!/bin/sh
export _JAVA_OPTIONS=-Dfile.encoding=UTF-8
su emjed
chroot /usr/bin/java -jar /usr/local/lib/emjed/emjed.jar <- 引数

$ ll  /etc/init.d/emjed
-rwxr-xr-x 1 root root ..... /etc/init.d/emjed
cat /etc/init.d/emjed
#!/bin/
start () {
  echo -e "Starting Emjed"
  /usr/local/bin/emjed
  return 0
}

/etc/rc2.d/S20emjed.sh -> ../init.d/emjed
/etc/rc3.d/S20emjed.sh -> ../init.d/emjed
/etc/rc4.d/S20emjed.sh -> ../init.d/emjed
/etc/rc5.d/S20emjed.sh -> ../init.d/emjed


----------------------------------------------------------------
TODO

ログとか.

このプログラム自体の起動スクリプトの例.
三段階の停止, 起動, 再起動, つまり
  このプログラムが扱っているプログラム
  このプログラム
  OS

ZIP で import export したい！

----------------------------------------------------------------
データベース

あるディレクトリ以下をデータベースとする.
このディレクトリを *dir* とする.
*dir* は起動時に指定する.
絶対パス, または emjed を起動したときのカレントディレクトリを起点
とする相対パスで指定する.
省略すると emjed を起動したときのカレントディレクトリが *dir* と
して使われる.
実行中に切替られる.

データベースは,
コンフィギュレーション, プログラム登録達, ファイル達からなる.

コンフィギュレーションは, 文字列, 数値, 真偽値, 配列,
ハッシュマップ および null によるデータであり,
配列およびハッシュマップは, 階層的に他のデータ型のデータを
格納することができる.

emjed は, 起動時および *dir* が切り替えられた時に *dir*/conf.json
ファイルに格納された JSON 表現をコンフィギュレーションとして読み込む.
文字列, 数値, 真偽値, 配列, ハッシュマップ および null は
それぞれ, JSON の, 文字列, 数値, 真偽値, 配列, オブジェクトおよび
null で表現される.
また, 指定された場合, メモリ中に保持しているコンフィギュレーション
を, *dir*/conf.json ファイルに JSON 形式で書き込む.

コンフィギュレーションの内容は emjed は関知しない.
後述のプログラム達が利用する設定などを自由に構成して良い.

プログラム登録達は, コンフィグレーションと同様の仕組みで,
プログラムの名称, 名前空間, 実行スケジュールなど, プログラムの実行
に関わるデータを保持する.
起動時や *dir* が切り替えられた際に *dir*/prog.json ファイルに格納
された JSON 表現を読み込み, また指定された場合に, メモリ中に保持し
ているプログラム達を, *dir*/prog.json に JSON 形式で書き込む.
ただし, 構造は内部で規定されており, 後述するインターフェイスを通して,
構造を保持しながらデータを閲覧・編集する.

ファイル達, はソースコード, コンパイル済みバイナリなどのライブラリや
プログラムのファイル. リソースとなる HTML, 画像などのファイルである.
前述の *dir*/conf.json, *dir*/prog.json と名称が重ならない限りにおいて
*dir* 以下に自由にファイルを配置し, リソースとしてプログラム登録や
登録されたプログラム内部からアクセスして良い.

データベース全体, コンフィギュレーション, プログラム登録達,
ファイル達にアクセスする方法は二通りある.
ネットワークインターフェイスとライブラリインターフェイスである.

ネットワークインターフェイス.
同ホストまたは同ホストに TCP/IP アクセス可能なホスト上の,
HTTP クライアントから HTTP サーバとして起動している emjed に
アクセスし, データベースの閲覧・編集が可能である.
この命令や応答の内容をネットワークインターフェイスとして規定する.

ライブラリインターフェイス.
データベースに登録されたプログラム達は, ライブラリインターフェイス
を通して, データベースにアクセス可能である.
この命令や応答の内容をライブラリインターフェイスとして規定する.

----------------------------------------------------------------
全般

ネットワークインターフェイス
pwd
cd path
load
save

ライブラリインターフェイス
ldb/pwd
ldb/cd path
ldb/load
ldb/save

----------------------------------------------------------------
コンフィギュレーション

":foo:bar" 式のキーチェインの名前: Qualified Key
[:foo :bar] 式のキーチェインの名前: Key Vector

ネットワークインターフェイス
get qk                -> json-exp
getrec qk             -> json-exp
set qk json-exp       -> "OK"
del qk                -> "OK"
rename sqk dqk        -> "OK"

ライブラリインターフェイス
ldb/get kv            -> native-exp
ldb/getrec kv         -> native-exp
ldb/set kv native-exp -> nil
ldb/del kv            -> nil
ldb/rename skv dkv    -> nil

----------------------------------------------------------------
プログラム登録達

ライブラリインターフェイス
register
  name
  lang
  version
unregister name
view name item value
edit name item
exec name
kill name
ps

プログラムの実行が終わったら,
runnings から削除はいつやる?
ps された時?

実行タイミングはプログラムの属性じゃない！ってことにする？
Windows のタスクスケジューラも
Cron もそうだよね?
その構造変更は後でもできる.
とりあえずプログラムの属性として実装しよう.

*prog* がどういう状態にあるべきか考えよう
{:km20 ; <- name as keyword
  {:main "air12.programs.km20"
   :name-spaces []
   :execution  "AUTO" | "MANUAL" ; なければ MANUAL
   :timing     "ONCE" | "LOOP" |
               ["****-**-01 *** **:**:**",
                "****-**-** Wed 01:**:**"]
  }

***** イベント駆動! ******

一回実行
  起動時に一回だけやりたい処理や
  サーバの起動など

ループ実行
  実行が終わったら適当な（組み込みの）ミリ秒だけまって順に実行.
  インターバルではなく, 実行が終わってから次の実行までの待ち時間.
  周期実行ではない.

スケジュール実行
  分 0-59
  時 0-23
  日 1-31
  月 1-12
  曜日 0-7 (0および7は日曜日)
  それぞれ
    カンマ区切りで複数指定    0,10
    ハイフン区切りで範囲指定  1-5
    カンマとハイフン共存
    間隔指定 */5 5分おき,
      3,8,13,18,23,28,33,38,43,48,53,58 を指定したい場合は?
      ハイフンの右側がきれてるのはダメっぽい 3-/5 はダメか.
      3-58/5 にすればいい.
      3-59/5 でもいいか.
    *
これだと最終金曜日とか, 月末とかできない.
cron の場合 cron エントリは毎週金曜実行して,
そのエントリの中で test と date を駆使して最終金曜かどうか
(7日後が次の月かどうか) 識別したりしている.

cron の指定はシンボリックでないところが欠点.
指定能力としては同等のものが必要
例えば, 平日(曜日: 1-5) は,
9:00 に空調 on, 12:00 に off, 13:00 に on, 18:00 に off
など.
なので,
 {:minute " "
  :hour " "
  :day " "
  :day-of-week " "
  :month " "}
で, 各項目の指定は crontab と同じ, ただし "*" な項目は省略可能と
してはどうか.
すると毎分: {}
1分を基点として 5分おき: {:minute "1-59/5"}
毎時 3分 {:minute "3"}
毎日 8:00,13:00, {:minute "0" :hour "8,13"}



----------------------------------------------------------------
ファイル達

ネットワークインターフェイス
flist
fget path
fput path length "\r\n" binary "\r\n"
fdel path
frename spath dpath

ライブラリインターフェイス
ldb/flist          -> a list
ldb/fget path      -> body
ldb/fput path body -> "OK"
ldb/fdel path      -> "OK"
ldb/frename spath dpath -> "OK"

----------------------------------------------------------------
JSON は RFC 4627 
http://datatracker.ietf.org/doc/rfc4627/
で規定される国際標準である.
